name: "Automated Release"

on:
  pull_request:
    branches:
      - "master"

jobs:
  build:
    name: "Build"
    runs-on: "windows-latest"
    env:
      working-directory: .
      project-name: SRTPluginUIJSON
      platform: Any CPU
      configuration: Release
    outputs:
      solution: ${{steps.generated-variables-1.outputs.solution}}
      project: ${{steps.generated-variables-1.outputs.project}}
      build-directory: ${{steps.generated-variables-1.outputs.build-directory}}
      zip-filename: ${{steps.generated-variables-2.outputs.zip-filename}}
      version: ${{steps.get_version.outputs.RELEASE_VERSION}}

    steps:
    # Checkout latest code
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        
    # Checkout latest dependencies code
    - name: Checkout SRTHost
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        path: SRTHost
        repository: Squirrelies/SRTHost
        
    # Set some output variables
    - name: Set the main environment variables based on other environment variables
      id: generated-variables-1
      run: |
        echo '::set-output name=solution::${{env.project-name}}.sln'
        echo '::set-output name=project::${{env.project-name}}/${{env.project-name}}.csproj'
        echo '::set-output name=build-directory::${{env.project-name}}/bin/Release/net5.0/'

    # Get the project's version number
    - name: Get project version
      id: get_version
      uses: greenygh0st/net-proj-release-version@v1
      with:
        PROJ_FILE: ${{steps.generated-variables-1.outputs.project}}

    # Sets the zip-filename output variable based on the project version
    - name: Sets the zip-filename environment variable based on the project version
      id: generated-variables-2
      run: |
        echo '::set-output name=zip-filename::${{env.project-name}}-v${{steps.get_version.outputs.RELEASE_VERSION}}.zip'

    # Install .NET
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x

    # Compiles the program and runs the publish profile
    - name: Compile and run publish profile
      run: |
        dotnet build ${{steps.generated-variables-1.outputs.solution}} -c "${{env.configuration}}" /p:Platform="${{env.platform}}"

    # Decode the base 64 encoded pfx and save the code signing certificate
    - name: Decode the pfx
      run: |
        Set-Content -Path '${{steps.generated-variables-1.outputs.build-directory}}/CodeSign.txt' -Value '${{ secrets.CERTIFICATE }}'
        certutil -decode '${{steps.generated-variables-1.outputs.build-directory}}/CodeSign.txt' '${{steps.generated-variables-1.outputs.build-directory}}/CodeSign.pfx'
        Remove-Item -Path '${{steps.generated-variables-1.outputs.build-directory}}/CodeSign.txt'
        
    - name: Code sign the dll
      run: |
        $filesToZip = (Get-ChildItem -Path '${{steps.generated-variables-1.outputs.build-directory}}' -Filter ${{env.project-name}}.dll).fullname
        foreach ($fileToZip in $filesToZip) {
            & "C:/Program Files (x86)/Windows Kits/10/bin/10.0.19041.0/x64/signtool.exe" sign /tr "http://timestamp.digicert.com" /td SHA1 /f "${{steps.generated-variables-1.outputs.build-directory}}/CodeSign.pfx" /p "${{secrets.CERTIFICATE_PASS}}" /fd SHA1 "$fileToZip"
            & "C:/Program Files (x86)/Windows Kits/10/bin/10.0.19041.0/x64/signtool.exe" sign /tr "http://timestamp.digicert.com" /td SHA1 /f "${{steps.generated-variables-1.outputs.build-directory}}/CodeSign.pfx" /p "${{secrets.CERTIFICATE_PASS}}" /fd SHA256 /as "$fileToZip"
            & "C:/Program Files (x86)/Windows Kits/10/bin/10.0.19041.0/x64/signtool.exe" sign /tr "http://timestamp.digicert.com" /td SHA1 /f "${{steps.generated-variables-1.outputs.build-directory}}/CodeSign.pfx" /p "${{secrets.CERTIFICATE_PASS}}" /fd SHA512 /as "$fileToZip"
        }

    - name: Upload publish artifacts
      uses: actions/upload-artifact@v2
      with:
        path: |
          ${{steps.generated-variables-1.outputs.build-directory}}*

  release:
    name: "Release"
    runs-on: "windows-latest"
    needs: build
    env:
      working-directory: .
      is-prerelease: true

    steps:
    # Checkout latest code
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v2

    # Zip the publish artifacts
    - name: Zip the publish artifacts
      run: |
        Add-Type -assembly 'System.IO.Compression'
        Add-Type -assembly 'System.IO.Compression.FileSystem'
        [System.IO.Compression.ZipArchive]$zipFile = [System.IO.Compression.ZipFile]::Open('${{needs.publish.outputs.zip-filename}}', ([System.IO.Compression.ZipArchiveMode]::Create))
        $filesToZip = (Get-ChildItem -Path artifact/ -Filter *).fullname
        foreach ($fileToZip in $filesToZip) {
            [System.IO.Compression.ZipFileExtensions]::CreateEntryFromFile($zipFile, $fileToZip, (Split-Path $fileToZip -Leaf))
        }
        [System.IO.Compression.ZipFileExtensions]::CreateEntryFromFile($zipFile, 'LICENSE', 'LICENSE')
        $zipFile.Dispose()

    # Pushes the release
    - name: Publish release
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: ${{needs.publish.outputs.version}}
        prerelease: ${{env.is-prerelease}}
        title: 'Automated Build - v${{needs.publish.outputs.version}}'
        files: |
          ${{needs.publish.outputs.zip-filename}}
